@using TightWiki;
@using System.Text.Encodings.Web
@using TightWiki.Models
@{
    var sessionState = ViewData["SessionState"] as SessionState ?? throw new Exception("Wiki State Context cannot be null.");
    string navBarClass = $"navbar navbar-expand-sm navbar-toggleable-sm {(TightWiki.Models.GlobalConfiguration.FixedMenuPosition ? "fixed-top" : "")} navbar-light bg-white border-bottom box-shadow mb-3";
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@(sessionState.PageTitle ?? sessionState.Page.Name)</title>

    <!-- Syntax Highlighter:Begin -->
    <script src="@Url.Content("~/syntax/highlight.min.js")"></script>
    <script>hljs.highlightAll();</script>
    <!-- Syntax Highlighter:End -->
    @if (string.IsNullOrWhiteSpace(TightWiki.Models.GlobalConfiguration.HTMLHeader) == false)
    {
        <!-- HTMLHeader:Begin -->
        @Html.Raw(TightWiki.Models.GlobalConfiguration.HTMLHeader)
        <!-- HTMLHeader:Begin -->
    }

    @if (TightWiki.Models.GlobalConfiguration.IncludeWikiDescriptionInMeta)
    {
        <!-- PageDescription:Begin -->
        <meta name="description" content="@sessionState.Page.Description">
        <!-- PageDescription:Begin -->
    }

    @if (TightWiki.Models.GlobalConfiguration.IncludeWikiTagsInMeta)
    {
        <!-- PageTags:Begin -->
        <meta name="keywords" content="@sessionState.PageTags">
        <!-- PageTags:Begin -->
    }

    <script src="@Url.Content("~/lib/jquery/dist/jquery.min.js")"></script>
    <script src="@Url.Content("~/lib/bootstrap/dist/js/bootstrap.bundle.min.js")"></script>

    <!-- Theme:Begin -->
    @foreach (var file in sessionState.UserTheme.Files)
    {
        <link rel="stylesheet" href="@Url.Content($"~{file}")" />
    }
    <!-- Theme:End-->

    <link rel="stylesheet" href="@Url.Content("~/css/base.css")" />

    <script src="@Url.Content("~/js/site.js")" asp-append-version="true"></script>

    <link id="themeStylesheet" rel="stylesheet" href="" />
    <script>
        $(document).ready(function () {
        localStorage.setItem('theme', 'dark');
        $('nav').removeClass('navbar-light bg-white').addClass('@sessionState.UserTheme.ClassNavBar');
        $('a.nav-link').removeClass('text-dark').addClass('@sessionState.UserTheme.ClassNavLink');
        $('a.dropdown-item').removeClass('text-dark').addClass('@sessionState.UserTheme.ClassDropdown');
        $('span.glyphicon').removeClass('text-dark').addClass('@sessionState.UserTheme.ClassBranding');
        });
    </script>

    @RenderSection("Scripts", required: false)
</head>

<body>
    <header>
        <nav class="@navBarClass">
            <div class="container">
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <a class="navbar-brand" href="@GlobalConfiguration.BasePath/"><span class="glyphicon text-dark"><img src="@Url.Content(TightWiki.Models.GlobalConfiguration.BrandImageSmall)" /> @TightWiki.Models.GlobalConfiguration.Name</span></a>
                <div class="navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse">
                    <ul class="navbar-nav flex-grow-1">
                        @foreach (TightWiki.Models.DataModels.MenuItem item in TightWiki.Models.GlobalConfiguration.MenuItems)
                        {
                            if (item.Link.StartsWith("http://", StringComparison.InvariantCultureIgnoreCase) || item.Link.StartsWith("https://", StringComparison.InvariantCultureIgnoreCase))
                            {
                                <li class="nav-item"><a class="nav-link text-dark" href="@item.Link">@item.Name</a></li>
                            }
                            <li class="nav-item"><a class="nav-link text-dark" href="@GlobalConfiguration.BasePath@item.Link">@item.Name</a></li>
                        }

                        @if (sessionState.CanCreate == true
                        || (sessionState.ShouldCreatePage == true && sessionState.CanCreate == true)
                        || (sessionState.Page.Exists == true && (sessionState.CanEdit == true || sessionState.CanModerate == true || sessionState.CanDelete == true))
                        )
                        {
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle text-dark" href="#" id="navbarDropdownMenuLink" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Page</a>
                                <div class="dropdown-menu" aria-labelledby="navbarDropdownMenuLink">

                                    @if (sessionState.CanCreate == true)
                                    {
                                        if (sessionState.ShouldCreatePage == true)
                                        {
                                            <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/@sessionState.PageNavigation/Create">Create "@sessionState.PageNavigation"</a>
                                        }

                                        <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Page/Create">Create new page</a>
                                    }

                                    @if (sessionState.Page.Exists == true)
                                    {
                                        @if (sessionState.CanCreate == true)
                                        {
                                            <div class="dropdown-divider"></div>
                                        }
                                        if (sessionState.CanView == true && TightWiki.Models.GlobalConfiguration.EnablePageComments)
                                        {
                                            <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/@sessionState.PageNavigation/Comments">Comments</a>
                                        }
                                        if (sessionState.CanDelete == true)
                                        {
                                            <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/@sessionState.PageNavigation/Delete">Delete this page</a>
                                        }
                                        if (sessionState.CanEdit == true && sessionState.Page.IsHistoricalVersion == false)
                                        {
                                            <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/@sessionState.PageNavigation/Edit">Edit</a>
                                        }
                                        if (sessionState.CanView == true)
                                        {
                                            <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/@sessionState.PageNavigation/Revisions">Revisions</a>
                                        }
                                        if (sessionState.CanCreate == true)
                                        {
                                            <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/@sessionState.PageNavigation/Refresh">Refresh</a>
                                        }
                                        if (sessionState.CanModerate == true && sessionState.Page.IsHistoricalVersion == true)
                                        {
                                            <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/@sessionState.PageNavigation/revert/@sessionState.Page.Revision">Revert to revision @sessionState.Page.Revision</a>
                                        }
                                        if (sessionState.CanView == true && TightWiki.Models.GlobalConfiguration.EnablePageComments)
                                        {
                                            <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/@sessionState.PageNavigation">View</a>
                                        }
                                        if (sessionState.CanView == true)
                                        {
                                            <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/@sessionState.PageNavigation/Export">Export</a>
                                        }
                                    }
                                </div>
                            </li>
                        }

                        @if (sessionState.IsAuthenticated == true && (sessionState.CanModerate == true || sessionState.Role == TightWiki.Library.Constants.Roles.Administrator))
                        {
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle text-dark" href="#" id="navbarDropdownMenuLink" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Admin</a>
                                <div class="dropdown-menu" aria-labelledby="navbarDropdownMenuLink">
                                    @if (sessionState.Role == TightWiki.Library.Constants.Roles.Administrator)
                                    {
                                        <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Admin/Accounts">Accounts</a>
                                        <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Admin/Roles">Roles</a>
                                        <div class="dropdown-divider"></div>
                                        <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Admin/Config">Configuration</a>
                                        <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Admin/Emojis">Emojis</a>
                                        <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Admin/MenuItems">Site Menu</a>
                                        <div class="dropdown-divider"></div>
                                        <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Admin/CompilationStatistics">Compilations</a>
                                        <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Admin/Database">Database</a>
                                        <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Admin/Exceptions">Exceptions</a>
                                        <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Admin/Metrics">Metrics</a>
                                        <div class="dropdown-divider"></div>
                                        <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Admin/DeletedPages">Deleted Pages</a>
                                        <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Admin/MissingPages">Missing Pages</a>
                                        <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Admin/Moderate">Moderate</a>
                                        <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Admin/Namespaces">Namespaces</a>
                                        <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Admin/OrphanedPageAttachments">Orphaned Attachments</a>
                                        <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Admin/Pages">Pages</a>
                                    }
                                    else if (sessionState.CanModerate == true)
                                    {
                                        <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Admin/DeletedPages">Deleted Pages</a>
                                        <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Admin/MissingPages">Missing Pages</a>
                                        <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Admin/Moderate">Moderate</a>
                                        <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Admin/Namespaces">Namespaces</a>
                                        <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Admin/Pages">Pages</a>
                                    }
                                </div>
                            </li>
                        }

                        @if (sessionState.IsAuthenticated == true)
                        {
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle text-dark" href="#" id="navbarDropdownMenuLink" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">My</a>
                                <div class="dropdown-menu" aria-labelledby="navbarDropdownMenuLink">
                                    <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Profile/My">Profile</a>
                                    <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Identity/Account/Manage">Account</a>
                                    <div class="dropdown-divider"></div>
                                    <a class="dropdown-item text-dark" href="@GlobalConfiguration.BasePath/Identity/Account/Logout?returnUrl=/">Logout</a>
                                </div>
                            </li>
                        }

                        @if (sessionState.IsAuthenticated == false)
                        {
                            <li class="nav-item"><a class="nav-link text-dark" href="@GlobalConfiguration.BasePath/Identity/Account/Login?returnUrl=@UrlEncoder.Default.Encode($"{GlobalConfiguration.BasePath}{Context.Request.Path.Value}")">Login</a></li>
                        }

                        @if (TightWiki.Models.GlobalConfiguration.IncludeSearchOnNavbar)
                        {
                            <li class="nav-item ms-auto d-none d-lg-block">
                                <div class="collapse navbar-collapse justify-content-end">
                                    <form class="d-flex" role="search" method="GET" action="@GlobalConfiguration.BasePath/Page/Search">
                                        <input class="form-control me-2" type="search" placeholder="Search" name="SearchString" aria-label="Search">
                                        <button class="btn btn-outline-primary" type="submit">Search</button>
                                    </form>
                                </div>
                            </li>
                        }
                        <li class="nav-item"><a class="btn btn-link" href="@GlobalConfiguration.BasePath/Page/Localization">@System.Globalization.CultureInfo.CurrentCulture.Name.ToUpperInvariant()</a></li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <div class="container" @(TightWiki.Models.GlobalConfiguration.FixedMenuPosition ? "style=margin-top:80px;" : "")>
        <main role="main" class="pb-3">
            @Html.Raw(TightWiki.Models.GlobalConfiguration.HTMLPreBody)

            @if (TightWiki.Repository.UsersRepository.AdminPasswordStatus() != TightWiki.Library.Constants.AdminPasswordChangeState.HasBeenChanged)
            {
                <div class="card bg-warning mb-3">
                    <div class="card-header"><strong>Default password has not been changed</strong></div>
                    <div class="card-body">
                        <p class="card-text">
                            The admin password is set to its default value, it is <i>recommended</i> that you change it immediately!<br />
                            <br />
                            You can change this password by logging in, navigating to My -&gt; Account -&gt; Password.<br />
                            <br />
                            <strong>Current admin login:</strong><br />
                            &nbsp;&nbsp;&nbsp;<strong>Username:</strong>"admin@tightwiki.com"<br />
                            &nbsp;&nbsp;&nbsp;<strong>Password:</strong>"@TightWiki.Library.Constants.DEFAULTPASSWORD"<br />
                            <br />
                        </p>
                    </div>
                </div>
            }

            @{
                Model.SuccessMessage = String.IsNullOrEmpty(Context.Request.Query["SuccessMessage"].ToString()) ? Model.SuccessMessage : Context.Request.Query["SuccessMessage"].ToString();
                Model.WarningMessage = String.IsNullOrEmpty(Context.Request.Query["WarningMessage"].ToString()) ? Model.WarningMessage : Context.Request.Query["WarningMessage"].ToString();
                Model.ErrorMessage = String.IsNullOrEmpty(Context.Request.Query["ErrorMessage"].ToString()) ? Model.ErrorMessage : Context.Request.Query["ErrorMessage"].ToString();
            }

            @if (!String.IsNullOrEmpty(Model.SuccessMessage))
            {
                <div id="success-alert" class="alert alert-success alert-dismissible fade show" role="alert">
                    <p class="fw-bold">@Html.Raw(Model.SuccessMessage)</p>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>

                <script>
                    document.addEventListener("DOMContentLoaded", function () {
                        setTimeout(function () {
                            let alertElement = document.getElementById('success-alert');
                            if (alertElement) {
                                // Add fade-out effect
                                alertElement.classList.remove('show');
                                alertElement.classList.add('fade');

                                // Remove the alert completely after the fade-out animation
                                setTimeout(() => alertElement.remove(), 300);
                            }
                        }, 5000);
                    });
                </script>
            }

            @if (!String.IsNullOrEmpty(Model.WarningMessage))
            {
                <div id="success-alert" class="alert alert-warning alert-dismissible fade show" role="alert">
                    <p class="fw-bold">@Html.Raw(Model.WarningMessage)</p>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            @if (!String.IsNullOrEmpty(Model.ErrorMessage))
            {
                <div id="success-alert" class="alert alert-danger alert-dismissible fade show" role="alert">
                    <p class="fw-bold">@Html.Raw(Model.ErrorMessage)</p>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            @RenderBody()
            @Html.Raw(TightWiki.Models.GlobalConfiguration.HTMLPostBody)
        </main>
    </div>

    <div class="container">
        @if (TightWiki.Models.GlobalConfiguration.FooterBlurb != null || TightWiki.Models.GlobalConfiguration.Copyright != null)
        {
            <hr class="mt-5 mb-5">

            @if (TightWiki.Models.GlobalConfiguration.FooterBlurb != null)
            {
                @Html.Raw(TightWiki.Models.GlobalConfiguration.FooterBlurb)
            }
            @if (TightWiki.Models.GlobalConfiguration.Copyright != null)
            {
                <br />
                @Html.Raw(TightWiki.Models.GlobalConfiguration.Copyright)
            }
        }
        @Html.Raw(TightWiki.Models.GlobalConfiguration.HTMLFooter)
    </div>

</body>
</html>
