@using TightWiki.Models
@inject IViewLocalizer Localizer
@model TightWiki.Models.ViewModels.Page.PageEditViewModel
@{
    Layout = "/Views/Shared/_Layout.cshtml";
    var sessionState = ViewData["SessionState"] as TightWiki.SessionState ?? throw new Exception("Wiki State Context cannot be null.");
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
<link rel="stylesheet" href=@Url.Content("~/codemirror/theme/light.css")>
<link rel="stylesheet" href=@Url.Content("~/codemirror/theme/dark.css")>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/scroll/simplescrollbars.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />

<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/edit/matchbrackets.min.js" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="@Url.Content("~/codemirror/mode/tightwiki/tightwiki.js")"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/scroll/simplescrollbars.min.js" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<style type="text/css">
    .CodeMirror {
        border: 1px solid #eee;
        height: 50em;
    }

    .active {
        background-color: lightgreen !important;
    }

    #dropSection {
        width: 100%; /* Makes the section fully responsive */
        height: auto; /* Allow the height to adjust with content */
        min-height: 150px; /* Minimum height to allow space for content */
        border: 2px dashed #007bff;
        border-radius: 5px;
        text-align: center;
        font-size: 18px;
        color: #007bff;
        margin-bottom: 20px;
        padding: 20px;
        background-color: var(--bs-card-bg); /* Uses Bootstrap background color */
        word-wrap: break-word; /* Forces long words to break and wrap */
        white-space: normal; /* Ensures normal text wrapping */
    }

        #dropSection span {
            display: inline-block; /* Ensure the text behaves like inline elements */
            max-width: 100%; /* Restrict the width to 100% of the container */
            line-height: normal; /* Use normal line height for multi-line text */
        }

        #dropSection.dragover {
            background-color: #e9ecef;
            border-color: #007bff;
            color: #007bff;
        }
</style>

<script>
    const editMode = @(Model?.Id > 0 && @sessionState.CanCreate == true ? "true" : "false");
    var editor;
    var featureInsertModalTable;
    var insertLinkModal;
    var featureInsertModal;
    var templatesModal;
    var select2Initialized = false;

    function surroundSelectionWith(open, close) {
        const doc = editor.getDoc();
        var selection = doc.getSelection();

        if (selection == '') {
            selection = 'TEXT';
        }

        doc.replaceSelection(`${open}${selection}${close}`);

        if (!selection) {
            editor.focus();
            return;
        }

        // Select the new text.
        const cursor = doc.getCursor();
        doc.setSelection({
            line: cursor.line,
            ch: cursor.ch - (selection.length + 4)
        }, {
            line: cursor.line,
            ch: cursor.ch
        });
        editor.focus();
    }

    document.addEventListener("DOMContentLoaded", function () {

    insertLinkModal = new bootstrap.Modal('#insertLinkModal');
    featureInsertModal = new bootstrap.Modal('#featureInsertModal');
    templatesModal = new bootstrap.Modal('#templatesModal');

    document.getElementById('insertLinkModal').addEventListener('shown.bs.modal', function() {
        if (select2Initialized)
        {
            // Reset the defaults on the modal:
            document.getElementById('insertLinkModalLinkTitle').value = '';
            document.getElementById('linkModePage').checked = true;
            document.getElementById('linkInternalDiv').style.display = 'block';
            document.getElementById('linkExternalDiv').style.display = 'none';
            document.getElementById('insertLinkModalLinkURL').value = '';
            const $select = $('#insertLinkModalLinkPage');
            $select.val(null).trigger('change');
            return;
        }
        $('#insertLinkModalLinkPage').select2({
            dropdownParent: $('#insertLinkModal'),
            placeholder: "@Localizer["Search"]...",
            minimumInputLength: 0,
            ajax: {
                url: '/Page/Autocomplete',
                dataType: 'json',
                delay: 250,
                data: function(params) {
                    return {
                        q: params.term
                    };
                },
                processResults: function(data) {
                    return {
                        results: data.map(item => ({
                            id: item.id,
                            text: item.text
                        }))
                    };
                },
                cache: true
            }
        });
        document.querySelectorAll('input[name="linkMode"]').forEach(radio => {
            radio.addEventListener('change', () => {
                const mode = document.querySelector('input[name="linkMode"]:checked').value;
                if (mode === 'page') {
                    document.getElementById('linkInternalDiv').style.display = 'block';
                    document.getElementById('linkExternalDiv').style.display = 'none';
                } else {
                    document.getElementById('linkInternalDiv').style.display = 'none';
                    document.getElementById('linkExternalDiv').style.display = 'block';
                }
            });
        });
        select2Initialized = true;
    });

    document.getElementById('insertLinkModalInsertButton').addEventListener('click', function () {
        const linkText = document.getElementById('insertLinkModalLinkTitle').value.trim();
        const linkMode = document.querySelector('input[name="linkMode"]:checked')?.value;

        let markdown = '';
        let isValid = true;

        if (linkMode === 'page') {
            const selected = $('#insertLinkModalLinkPage').select2('data')[0];
            if (!selected) {
                alert("@Localizer["Select a wiki page."]");
                isValid = false;
            } else {

                if(!linkText)
                {
                    markdown = `[[${selected.text}]]`
                }
                else{
                    markdown = `[[${selected.text}, \"${linkText}\"]]`
                }
            }
        } else if (linkMode === 'url') {
            const url = document.getElementById('insertLinkModalLinkURL').value.trim();
            if (!url) {
                alert("@Localizer["Enter a URL."]");
                isValid = false;
            } else if (!/^https?:\/\//i.test(url)) {
                alert("@Localizer["URL must start with"] http:// or https://");
                isValid = false;
            } else {

                if(!linkText)
                {
                    markdown = `[[${url}]]`
                }
                else{
                    markdown = `[[${url}, \"${linkText}\"]]`
                }
            }
        } else {
            isValid = false;
        }

        if (!isValid) return;

        const doc = editor.getDoc();
        var selection = doc.getSelection();

        doc.replaceSelection(markdown);

        // Select the new text.
        const cursor = doc.getCursor();
        doc.setSelection({
            line: cursor.line,
            ch: cursor.ch - (markdown.length + 4)
        }, {
            line: cursor.line,
            ch: cursor.ch
        });

        insertLinkModal.hide();
        editor.focus();
    });

        document.getElementById('featureInsertModal').addEventListener('shown.bs.modal', function () {
            const featureInsertModalTableElement = document.getElementById('featureInsertModalTable');
            const featureInsertModalTableData = @Json.Serialize(Model?.FeatureTemplates);

            if(!featureInsertModalTable)
            {
                featureInsertModalTable = new Tabulator(featureInsertModalTableElement, {
                height: "300px",
                data: featureInsertModalTableData,
                layout: "fitDataStretch",
                columns: [
                        {
                            title: "@Localizer["Insert"]",
                            headerSort: false,
                            hozAlign: "center",
                            formatter: () => "<a class=\"btn btn-success btn-thin rounded-0\">@Localizer["Insert"]</a>",
                            cellClick: (e, cell) => {
                                const row = cell.getRow().getData();
                                const value = row.templateText.replace(/\r\n/g, "\n");

                                const doc = editor.getDoc();

                                // current selection (single range assumed)
                                const sel = doc.listSelections()[0];
                                const from = sel.from();
                                const to   = sel.to();

                                // replace and then select the inserted text
                                doc.replaceRange(value, from, to);

                                const start = from;
                                const end = doc.posFromIndex(doc.indexFromPos(start) + value.length);
                                doc.setSelection(start, end);

                                featureInsertModal.hide();

                                editor.focus();
                            }
                        },
                        {
                            title: "@Localizer["Name"]",
                            field: "name",
                            formatter: function (cell) {
                                const data = cell.getRow().getData();
                                const label = cell.getValue() ?? "";
                                const url = data.helpPageNavigation;
                                if (!url) return label;
                                return `<a href="@GlobalConfiguration.BasePath/${url}" target="_blank" rel="noopener noreferrer">${label}</a>`;
                            }
                        },
                        { title: "@Localizer["Type"]", field: "type" },
                        { field: "templateText", visible: false },
                        { field: "helpPageNavigation", visible: false },
                        { title: "@Localizer["Description"]", field: "description" }
                    ],
                });

                //Auto size the last column to fit the content.
                featureInsertModalTable.on('renderComplete', () => featureInsertModalTable.getColumn("description")?.setWidth(true));
            }
            else
            {
                //Redraw the table so the columns re-size correctly.
                requestAnimationFrame(() => featureInsertModalTable.redraw(true));
            }

            document.getElementById("featureInsertModalSearch").addEventListener("keyup", function () {
                const searchTerm = this.value;
                featureInsertModalTable.setFilter([
                    [
                        { field: "name", type: "like", value: searchTerm},
                        { field: "type", type: "like", value: searchTerm},
                        { field: "description", type: "like", value: searchTerm},
                    ]
                ]);
            });
        });

        $("#uploadedFiles").load("@GlobalConfiguration.BasePath/File/PageAttachments/@sessionState.PageNavigationEscaped");

        editor = CodeMirror.fromTextArea(document.getElementById("Body"), {
            theme: "@sessionState.UserTheme.EditorTheme",
            lineNumbers: true,
            mode: "text/x-tightwiki",
            matchBrackets: true,
            viewportMargin: Infinity,
            lineWrapping: true,
            scrollbarStyle: "simple",
            inputStyle: "contenteditable", // Enables browser's native spellcheck
            spellcheck: true,              // Explicitly enables spellcheck
            autocorrect: true              // Enables autocorrect
        });

        if (editMode) {
            const dropSection = document.getElementById('dropSection');
            const fileInput = document.getElementById('fileInput');
            const uploadStatus = document.getElementById('uploadStatus');
            // Handle dragover event
            dropSection.addEventListener('dragover', (e) => {
                e.preventDefault();
                dropSection.classList.add('dragover');
                dropSection.textContent = "@Localizer["Drop files here..."]";
            });

            // Handle dragleave event
            dropSection.addEventListener('dragleave', () => {
                dropSection.classList.remove('dragover');
                dropSection.textContent = "@Localizer["Attach files by dropping them here or by manually selecting them below:"]";
            });

            // Handle drop event
            dropSection.addEventListener('drop', (e) => {
                e.preventDefault();
                dropSection.classList.remove('dragover');
                dropSection.textContent = "@Localizer["Attach files by dropping them here or by manually selecting them below:"]";
                const files = e.dataTransfer.files;
                handleFileUpload(files);
            });

            // Open file input dialog on click
            dropSection.addEventListener('click', () => {
                fileInput.click();
            });

            // Handle file input change (manual upload)
            fileInput.addEventListener('change', () => {
                const files = fileInput.files;
                handleFileUpload(files);
            });
        }
        else {

            $('#templatesModal .js_use-template').on('click', function(e) {
                e.preventDefault();
                $.ajax($(this).attr('data-tmpurl'), {
                    success: function(data) {
                        editor.getDoc().setValue(data.body);
                    },
                    complete: function() {
                        templatesModal.hide();
                    }
                });
            });
        }

        // Function to handle file upload
        function handleFileUpload(files) {
            const formData = new FormData();
            for (let i = 0; i < files.length; i++) {
                formData.append('postedFiles', files[i]);
            }

            uploadFiles(formData);
        }

        // Function to upload files using fetch API
        function uploadFiles(formData) {
            fetch('@Url.Action("UploadDragDrop", "File")/@sessionState.PageNavigationEscaped', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())  // Read the response as JSON
                .then(result => {
                    if (result.success) {
                        uploadStatus.innerHTML = "<p>@Localizer["Upload successful"]: ${result.message}</p>";
                    } else {
                        uploadStatus.innerHTML = "<p>@Localizer["Error"]: ${result.message}</p>";
                    }
                    $("#uploadedFiles").load("@GlobalConfiguration.BasePath/File/PageAttachments/@sessionState.PageNavigationEscaped");
                })
                .catch(error => {
                    uploadStatus.innerHTML = `<p>@Localizer["Unexpected Error"]: ${error.message}</p>`;
                });
        }

        setInterval(ping, 60000);
    });

    function ping() {
        const spans = document.querySelectorAll('.badge.text-bg-danger');
        fetch('@Url.Action("Ping", "Page")?r=' + Math.random(), { method: 'GET' })
            .then(response => response.json())
            .then(result => {
                if (result.now) {
                    spans[0].classList.add("invisible");
                    spans[1].classList.add("invisible");
                }
                else {
                    spans[0].classList.remove("invisible");
                    spans[1].classList.remove("invisible");
                }
            })
            .catch(error => {
                spans[0].classList.remove("invisible");
                spans[1].classList.remove("invisible");
            });
    }

</script>

<div class="bodyDiv">
    <div class="card">
        <div class="card-header"><h3>@Localizer["Content"]</h3></div>
        <div class="card-body">
            @using (Html.BeginForm(null, null, FormMethod.Post, new { action = $"{GlobalConfiguration.BasePath}{Context.Request.Path}" }))
            {
                @Html.HiddenFor(x => x.Id)

                <div class="form-group">
                    <button type="submit" class="btn btn-primary">@Localizer["Save"]</button>
                    @if (sessionState.CanView == true)
                    {
                        if (Model?.Id > 0)
                        {
                            <a href="@GlobalConfiguration.BasePath/@sessionState.PageNavigation" target="_blank" rel="noopener" class="btn btn-success" role="button">@Localizer["View"]</a>
                            <a href="@GlobalConfiguration.BasePath/@sessionState.PageNavigation/Export" target="_blank" rel="noopener" class="btn btn-secondary" role="button">@Localizer["Export"]</a>
                        }
                        else
                        {
                            <button type="button" class="btn btn-link" data-bs-toggle="modal" data-bs-target="#templatesModal">@Localizer["Choose template"]</button>
                        }
                    }
                    <span class="badge text-bg-danger invisible">@Localizer["unauthorized"]</span>
                </div>
                <br />

                <strong>@Localizer["Name"]</strong>
                <br />
                @Html.TextBoxFor(x => x.Name, new { style = "width:50%" })
                <div class="text-danger">@Html.ValidationMessageFor(m => m.Name)</div>
                <br />

                <strong>@Localizer["Description"]</strong>
                <br />
                @Html.TextBoxFor(x => x.Description, new { style = "width:90%" })
                <div class="text-danger">@Html.ValidationMessageFor(m => m.Description)</div>
                <br />

                @if (GlobalConfiguration.ShowChangeSummaryWhenEditing)
                {
                    <strong>@Localizer["Change Summary"]</strong>
                    <br />
                    @Html.TextAreaFor(x => x.ChangeSummary, new { style = "width:90%", placeholder = @Localizer["What did you change and why?"].Value })
                    <div class="text-danger">@Html.ValidationMessageFor(m => m.ChangeSummary)</div>
                }

                <!-- Toolbar -->
                @if (@sessionState.UserTheme.EditorTheme == "dark")
                {
                    <div class="d-flex gap-2 mb-2">
                        <button type="button" class="btn btn-sm btn-dark p-1" onclick="surroundSelectionWith('**','**')">
                            <img src="/images/toolbar/toolbar_Dark_Bold.png" width="16" height="16" alt="@Localizer["Bold"]">
                        </button>
                        <button type="button" class="btn btn-sm btn-dark p-1" onclick="surroundSelectionWith('//','//')">
                            <img src="/images/toolbar/toolbar_Dark_Italic.png" width="16" height="16" alt="@Localizer["Italic"]">
                        </button>
                        <button type="button" class="btn btn-sm btn-dark p-1" onclick="surroundSelectionWith('__','__')">
                            <img src="/images/toolbar/toolbar_Dark_Underline.png" width="16" height="16" alt="@Localizer["Underline"]">
                        </button>
                        <button type="button" class="btn btn-sm btn-dark p-1" onclick="surroundSelectionWith('~~','~~')">
                            <img src="/images/toolbar/toolbar_Dark_Strike.png" width="16" height="16" alt="@Localizer["Strikethrough"]">
                        </button>
                        <button type="button" class="btn btn-sm btn-dark p-1" onclick="surroundSelectionWith('!!','!!')">
                            <img src="/images/toolbar/toolbar_Dark_Highlight.png" width="16" height="16" alt="@Localizer["Highlight"]">
                        </button>
                        <button type="button" class="btn btn-sm btn-dark d-flex align-items-center gap-1 px-2" data-bs-toggle="modal" data-bs-target="#insertLinkModal">
                            <img src="/images/toolbar/toolbar_Dark_Link.png" width="16" height="16" alt="@Localizer["Hyperlink"]...">
                        </button>

                        <div style="width:1px; height:24px; background-color:#ccc;"></div>

                        <button type="button" class="btn btn-sm btn-dark d-flex align-items-center gap-1 px-2" data-bs-toggle="modal" data-bs-target="#featureInsertModal">
                            @Localizer["Insert"] <img src="/images/toolbar/toolbar_Dark_Insert.png" width="16" height="16" alt="@Localizer["Insert"]...">
                        </button>
                    </div>
                }
                else
                {
                    <div class="d-flex gap-2 mb-2">
                        <button type="button" class="btn btn-sm btn-light p-1" onclick="surroundSelectionWith('**','**')">
                            <img src="/images/toolbar/toolbar_Light_Bold.png" width="16" height="16" alt="@Localizer["Bold"]">
                        </button>
                        <button type="button" class="btn btn-sm btn-light p-1" onclick="surroundSelectionWith('//','//')">
                            <img src="/images/toolbar/toolbar_Light_Italic.png" width="16" height="16" alt="@Localizer["Italic"]">
                        </button>
                        <button type="button" class="btn btn-sm btn-light p-1" onclick="surroundSelectionWith('__','__')">
                            <img src="/images/toolbar/toolbar_Light_Underline.png" width="16" height="16" alt="@Localizer["Underline"]">
                        </button>
                        <button type="button" class="btn btn-sm btn-light p-1" onclick="surroundSelectionWith('~~','~~')">
                            <img src="/images/toolbar/toolbar_Light_Strike.png" width="16" height="16" alt="@Localizer["Strikethrough"]">
                        </button>
                        <button type="button" class="btn btn-sm btn-light p-1" onclick="surroundSelectionWith('!!','!!')">
                            <img src="/images/toolbar/toolbar_Light_Highlight.png" width="16" height="16" alt="@Localizer["Highlight"]">
                        </button>
                        <button type="button" class="btn btn-sm btn-light d-flex align-items-center gap-1 px-2" data-bs-toggle="modal" data-bs-target="#insertLinkModal">
                            <img src="/images/toolbar/toolbar_Light_Link.png" width="16" height="16" alt="@Localizer["Hyperlink"]...">
                        </button>

                        <div style="width:1px; height:24px; background-color:#222;"></div>

                        <button type="button" class="btn btn-sm btn-light d-flex align-items-center gap-1 px-2" data-bs-toggle="modal" data-bs-target="#featureInsertModal">
                            @Localizer["Insert"] <img src="/images/toolbar/toolbar_Light_Insert.png" width="16" height="16" alt="@Localizer["Insert"]...">
                        </button>
                    </div>
                }

                <div class="text-danger">@Html.ValidationMessageFor(m => m.Body)</div>
                <textarea id="Body" name="Body" spellcheck="true">@(Model?.Body ?? String.Empty)</textarea>
                <br />

                <div class="form-group">
                    <button type="submit" class="btn btn-primary">@Localizer["Save"]</button>
                    @if (Model?.Id > 0 && sessionState.CanView == true)
                    {
                        <a href="@GlobalConfiguration.BasePath/@sessionState.PageNavigation" target="_blank" rel="noopener" class="btn btn-success" role="button">@Localizer["View"]</a>
                        <a href="@GlobalConfiguration.BasePath/@sessionState.PageNavigation/Export" target="_blank" rel="noopener" class="btn btn-secondary" role="button">@Localizer["Export"]</a>
                    }
                    <span class="badge text-bg-danger invisible">@Localizer["unauthorized"]</span>
                </div>
            }
        </div>
    </div>
    <br />

    <div class="card">
        <div class="card-header"><h3>@Localizer["Attachments"]</h3></div>
        <div class="card-body">
            @if (Model?.Id > 0 && @sessionState.CanCreate == true)
            {
                <div id="dropSection" class="dropSection">
                    <span class="d-inline-block">@Localizer["Drop file attachments here or click to upload manually."]</span>
                </div>
                <input type="file" id="fileInput" style="display:none" multiple>
                <div id="uploadStatus"></div>
                <div id="uploadedFiles"></div>
            }
            else
            {
                <div>@Localizer["Save the page before uploading files."]</div>
            }
        </div>
    </div>
</div>

<div class="modal" tabindex="-1" id="templatesModal" aria-labelledby="templatesModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="templatesModalLabel">@Localizer["Choose template"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            @if (Model?.Templates.Any() ?? false)
            {
                <div class="list-group list-group-flush">
                    @foreach (var template in Model.Templates)
                    {
                        <a href="#" data-tmpurl="@GlobalConfiguration.BasePath/Page/Template/@template.Id" class="list-group-item list-group-item-action js_use-template" aria-current="true">
                            <div class="d-flex w-100 justify-content-between">
                                <h5 class="mb-1">@template.Title</h5>
                                <small>@template.CreatedByUserName</small>
                            </div>
                            <p class="mb-1">@template.Description</p>
                        </a>
                    }
                </div>
            }

            <div class="modal-footer">
                <div class="container-fluid">
                    <em class="small">* - @Localizer["Use the Templates namespace to add a page to the list of templates, e.g. Templates :: My First Template."]</em>
                    <button type="button" class="btn btn-secondary float-end" data-bs-dismiss="modal">@Localizer["Close"]</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal" tabindex="-1" id="featureInsertModal" aria-labelledby="featureInsertModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="featureInsertModalLabel">@Localizer["Insert"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="@Localizer["Close"]"></button>
            </div>

            <div class="modal-body p-0">
                @* Search *@
                <div class="p-3 border-bottom position-sticky top-0" style="z-index:1">
                    <div class="input-group input-group-sm">
                        <span class="input-group-text" id="featureInsertSearchLabel">🔎</span>
                        <input id="featureInsertModalSearch" type="text" class="form-control" placeholder="@Localizer["Search"]..." aria-labelledby="featureInsertSearchLabel">
                    </div>
                </div>
                @* Table *@
                <div class="p-3">
                    <div id="featureInsertModalTable"></div>
                </div>
            </div>

            <div class="modal-footer">
                <div class="container-fluid">
                    <em class="small"></em>
                    <button type="button" class="btn btn-secondary float-end" data-bs-dismiss="modal">@Localizer["Close"]</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal" tabindex="-1" id="insertLinkModal" aria-labelledby="insertLinkModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="insertLinkModalLabel">@Localizer["Hyperlink"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="@Localizer["Close"]"></button>
            </div>

            <div class="modal-body p-3">
                <div class="mb-3">
                    <label class="form-label fw-bold">@Localizer["Link Type"]</label><br />
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="linkMode" id="linkModePage" value="page" checked>
                        <label class="form-check-label" for="linkModePage">@Localizer["Wiki Page"]</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="linkMode" id="linkModeUrl" value="url">
                        <label class="form-check-label" for="linkModeUrl">@Localizer["External URL"]</label>
                    </div>
                </div>

                <div>
                    <label for="insertLinkModalLinkTitle" class="form-label fw-bold">@Localizer["Link Text (Optional)"]</label>
                    <input id="insertLinkModalLinkTitle" type="url" class="form-control" placeholder="@Localizer["Link Text (Optional)"]" />
                </div>

                <div id="linkInternalDiv">
                    <label for="insertLinkModalLinkPage" class="form-label fw-bold">@Localizer["Choose a page"]</label>
                    <select id="insertLinkModalLinkPage" style="width: 100%"></select>
                </div>

                <div id="linkExternalDiv" style="display: none;">
                    <label for="insertLinkModalLinkURL" class="form-label fw-bold">@Localizer["External URL"]</label>
                    <input id="insertLinkModalLinkURL" type="url" class="form-control" placeholder="https://example.com" />
                </div>
            </div>

            <div class="modal-footer">
                <div class="container-fluid">
                    <em class="small"></em>
                    <button type="button" class="btn btn-success float-end" id="insertLinkModalInsertButton">@Localizer["Insert"]</button>
                </div>
            </div>
        </div>
    </div>
</div>
