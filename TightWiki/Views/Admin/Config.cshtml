@using TightWiki.Models
@inject IViewLocalizer Localizer
@model TightWiki.Models.ViewModels.Admin.ConfigurationViewModel
@{
    Layout = "_Layout";
    var sessionState = ViewData["SessionState"] as TightWiki.SessionState ?? throw new Exception("Wiki State Context cannot be null.");
}

<h3>
    @Localizer["Configuration"]
</h3>

<p>
    @Localizer["Global configuration values for the wiki, its functionality, behavior, formatting and branding."]
</p>

@using (Html.BeginForm(FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-group"><button type="submit" class="btn btn-primary mb-4">@Localizer["Save"]</button></div>

    @foreach (var group in Model.Nest)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card shadow-lg">
                    <div class="card-header">
                        <h4>@group.Name</h4>
                        <p>@group.Description</p>
                    </div>
                    <div class="card-body">
                        @foreach (var entry in group.Entries)
                        {
                            <div class="form-group row mb-3">
                                <label for="@entry.ConfigurationGroupId:@entry.Id" class="col-sm-2 col-form-label">
                                    <strong>@entry.Name</strong><br />
                                    <small class="text-muted">@entry.Description</small>
                                </label>
                                <div class="col-sm-10">
                                    @if ($"{group.Name}:{entry.Name}" == "Customization:Theme")
                                    {
                                        <select name="@entry.ConfigurationGroupId:@entry.Id" id="@entry.ConfigurationGroupId:@entry.Id" class="form-control">
                                            <option value="" style="color:#ccc !important;">@Localizer["Select a Theme"]</option>
                                            @foreach (var item in Model.Themes)
                                            {
                                                <option value="@item.Name" selected=@(entry.Value == item.Name ? "selected" : null)>@item.Name</option>
                                            }
                                        </select>
                                    }
                                    else if ($"{group.Name}:{entry.Name}" == "Membership:Default Signup Role")
                                    {
                                        <select name="@entry.ConfigurationGroupId:@entry.Id" id="@entry.ConfigurationGroupId:@entry.Id" class="form-control">
                                            <option value="" style="color:#ccc !important;">@Localizer["Select a role"]</option>
                                            @foreach (var item in Model.Roles)
                                            {
                                                <option value="@item.Name" selected=@(entry.Value == item.Name ? "selected" : null)>@item.Name</option>
                                            }
                                        </select>
                                    }
                                    else if ($"{group.Name}:{entry.Name}" == "Membership:Default TimeZone" || $"{group.Name}:{entry.Name}" == "Customization:Default TimeZone")
                                    {
                                        <select name="@entry.ConfigurationGroupId:@entry.Id" id="@entry.ConfigurationGroupId:@entry.Id" class="form-control">
                                            <option value="" style="color:#ccc !important;">@Localizer["Select a time-zone"]</option>
                                            @foreach (var item in Model.TimeZones)
                                            {
                                                <option value="@item.Value" selected=@(entry.Value == item.Value ? "selected" : null)>@item.Text</option>
                                            }
                                        </select>
                                    }
                                    else if ($"{group.Name}:{entry.Name}" == "Membership:Default Language" || $"{group.Name}:{entry.Name}" == "Customization:Default Language")
                                    {
                                        <select name="@entry.ConfigurationGroupId:@entry.Id" id="@entry.ConfigurationGroupId:@entry.Id" class="form-control">
                                            <option value="" style="color:#ccc !important;">@Localizer["Select a language"]</option>
                                            @foreach (var item in Model.Languages)
                                            {
                                                <option value="@item.Value" selected=@(entry.Value == item.Value ? "selected" : null)>@item.Text</option>
                                            }
                                        </select>
                                    }
                                    else if ($"{group.Name}:{entry.Name}" == "Membership:Default Country" || $"{group.Name}:{entry.Name}" == "Customization:Default Country")
                                    {
                                        <select name="@entry.ConfigurationGroupId:@entry.Id" id="@entry.ConfigurationGroupId:@entry.Id" class="form-control">
                                            <option value="" style="color:#ccc !important;">@Localizer["Select a country"]</option>
                                            @foreach (var item in Model.Countries)
                                            {
                                                <option value="@item.Value" selected=@(entry.Value == item.Value ? "selected" : null)>@item.Text</option>
                                            }
                                        </select>
                                    }
                                    else if (@entry.DataType == "string")
                                    {
                                        if (@entry.IsEncrypted == true)
                                        {
                                            <input type="password" value="@entry.Value" id="@entry.ConfigurationGroupId:@entry.Id" name="@entry.ConfigurationGroupId:@entry.Id" class="form-control">
                                        }
                                        else
                                        {
                                            <input type="text" name="@entry.ConfigurationGroupId:@entry.Id" id="@entry.ConfigurationGroupId:@entry.Id" value="@entry.Value" class="form-control">
                                        }
                                    }
                                    else if (@entry.DataType == "text")
                                    {
                                        <textarea name="@entry.ConfigurationGroupId:@entry.Id" id="@entry.ConfigurationGroupId:@entry.Id" rows="4" class="form-control">@entry.Value</textarea>
                                    }
                                    else if (@entry.DataType == "integer" || @entry.DataType == "decimal")
                                    {
                                        <input type="number" name="@entry.ConfigurationGroupId:@entry.Id" id="@entry.ConfigurationGroupId:@entry.Id" value="@entry.Value" class="form-control">
                                    }
                                    else if (@entry.DataType == "boolean")
                                    {
                                        <div class="form-check form-check-inline">
                                            <input type="radio" id="@entry.ConfigurationGroupId:@entry.Id:1" name="@entry.ConfigurationGroupId:@entry.Id" value="1" class="form-check-input" @(entry.Value == "1" ? "checked" : "")>
                                            <label for="@entry.ConfigurationGroupId:@entry.Id:1" class="form-check-label">Yes</label>
                                        </div>
                                        <div class="form-check form-check-inline">
                                            <input type="radio" id="@entry.ConfigurationGroupId:@entry.Id:0" name="@entry.ConfigurationGroupId:@entry.Id" value="0" class="form-check-input" @(entry.Value == "0" ? "checked" : "")>
                                            <label for="@entry.ConfigurationGroupId:@entry.Id:0" class="form-check-label">No</label>
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        @if (group.Name == "LDAP Authentication")
                        {
                            <hr class="my-4" />
                            <div class="border rounded p-3 bg-light">
                                <h5 class="mb-3">@Localizer["Test LDAP Authentication"]</h5>

                                <div class="row g-3 align-items-end" id="ldapTestForm">
                                    <div class="col-sm-4">
                                        <label for="ldapTestUsername" class="form-label">@Localizer["Username"]</label>
                                        <input type="text" id="ldapTestUsername" class="form-control" autocomplete="off">
                                    </div>
                                    <div class="col-sm-4">
                                        <label for="ldapTestPassword" class="form-label">@Localizer["Password"]</label>
                                        <input type="password" id="ldapTestPassword" class="form-control" autocomplete="new-password">
                                    </div>
                                    <div class="col-sm-4">
                                        <button type="button" id="btnLdapTest" class="btn btn-outline-primary">
                                            @Localizer["Test"]
                                        </button>
                                        <div id="ldapTestSpinner" class="spinner-border spinner-border-sm ms-2 d-none" role="status" aria-hidden="true"></div>
                                    </div>
                                </div>

                                <div id="ldapTestResult" class="mt-3" aria-live="polite"></div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="form-group"><button type="submit" class="btn btn-primary mt-2">@Localizer["Save"]</button></div>
}

<script>
    (function () {
      const area = document.getElementById('ldapTestForm');
      const testBtn = document.getElementById('btnLdapTest');

      if (area && testBtn) {
        area.addEventListener('keydown', function (e) {
          if (e.key === 'Enter') {
            e.preventDefault();
            testBtn.click();
          }
        });
      }
    })();

    (function () {
        const btn = document.getElementById('btnLdapTest');
        const spn = document.getElementById('ldapTestSpinner');
        const res = document.getElementById('ldapTestResult');
        const userInput = document.getElementById('ldapTestUsername');
        const passInput = document.getElementById('ldapTestPassword');

        function getAntiforgery() {
            const el = document.querySelector('input[name="__RequestVerificationToken"]');
            return el ? el.value : '';
        }

        function setResult(html, ok) {
            res.className = 'mt-3 alert ' + (ok ? 'alert-success' : 'alert-danger');
            res.innerHTML = html;
        }

        btn.addEventListener('click', async function () {
            const username = userInput.value.trim();
            const password = passInput.value;

            if (!username || !password) {
                setResult('@Localizer["Please enter both username and password."]', false);
                return;
            }

            btn.disabled = true;
            spn.classList.remove('d-none');
            setResult('', true);

            try {
                const resp = await fetch('/Admin/TestLdap', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiforgery()
                    },
                    body: JSON.stringify({ username, password })
                });

                if (!resp.ok) {
                    setResult('@Localizer["Request failed:"] ' + resp.status + ' ' + resp.statusText, false);
                    return;
                }

                const data = await resp.json();
                if (data.ok) {
                    const safeMsg = data.message ?? '@Localizer["Bind succeeded."]';
                    const dn = data.distinguishedName ? `<div><strong>DN:</strong> ${data.distinguishedName}</div>` : '';
                    setResult(`${safeMsg}${dn}`, true);
                } else {
                    const err = data.error ?? '@Localizer["Bind failed."]';
                    setResult(err, false);
                }
            } catch (e) {
                setResult('@Localizer["Unexpected error:"] ' + (e?.message || e), false);
            } finally {
                btn.disabled = false;
                spn.classList.add('d-none');
            }
        });
    })();
</script>
